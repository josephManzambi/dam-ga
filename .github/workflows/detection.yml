name: RDS Compliance Detection

on:
  workflow_dispatch:
    inputs:
      regions:
        description: "Comma-separated AWS regions (e.g. eu-west-1,us-east-1)"
        required: true
        default: "eu-west-1"
      accounts:
        description: "Comma-separated detection role ARNs (one per account)"
        required: true
      fail_on_drift:
        description: "Fail the workflow when drift is detected (true/false)"
        required: false
        default: "true"
      fail_min_severity:
        description: "Minimum severity that triggers failure (low|medium|high)"
        required: false
        default: "low"
  schedule:
    - cron: "0 3 * * *"  # daily 03:00 UTC

permissions:
  id-token: write
  contents: read

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build.outputs.matrix }}
      allow-drift: ${{ steps.build.outputs.allow_drift }}
    steps:
      - name: Build matrix include list
        id: build
        shell: bash
        run: |
          set -e
          regions_raw='${{ inputs.regions }}'
          roles_raw='${{ inputs.accounts }}'
          regions_json=$(echo "$regions_raw" | tr ',' '\n' | sed 's/^ *//;s/ *$//' | jq -R -s -c 'split("\n")|map(select(length>0))')
          roles_json=$(echo "$roles_raw" | tr ',' '\n' | sed 's/^ *//;s/ *$//' | jq -R -s -c 'split("\n")|map(select(length>0))')
          if [ "$(echo $regions_json | jq 'length')" -eq 0 ]; then echo '::error ::No regions provided'; exit 1; fi
          if [ "$(echo $roles_json | jq 'length')" -eq 0 ]; then echo '::error ::No roles provided'; exit 1; fi
          matrix=$(jq -c -n --argjson regions "$regions_json" --argjson roles "$roles_json" '{include:[ $regions[] as $r | $roles[] as $role | {region:$r, role:$role} ]}')
          echo "Matrix include: $matrix"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "allow_drift=false" >> $GITHUB_OUTPUT

  detect:
    runs-on: ubuntu-latest
    needs: prepare-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ matrix.role }}
          aws-region: ${{ matrix.region }}
      - name: Show caller identity
        run: aws sts get-caller-identity
      - name: Run detection
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p reports
          acct=$(echo "${{ matrix.role }}" | awk -F: '{print $5}')
          echo "--- Detection for account $acct region ${{ matrix.region }} role ${{ matrix.role }} ---"
          echo "(Info) The GitHub action has already assumed the role; invoking script with ambient credentials only."
          # Show help (non-fatal) for logging context
          python ./dam-detection.py --help > /dev/null || true
          set +e
          python ./dam-detection.py \
            --baseline baselines/rds-baseline.json \
            --region "${{ matrix.region }}" \
            --check-log-groups \
            --output "reports/detect-${acct}-${{ matrix.region }}.json" \
            --summary-output "reports/detect-summary-${acct}-${{ matrix.region }}.json"
          rc=$?
          set -e
          if [ $rc -eq 1 ] || [ $rc -eq 3 ]; then
            echo "::error ::Detection failed (exit code $rc). Aborting matrix job."; exit 1
          elif [ $rc -eq 2 ]; then
            echo "::notice ::Drift detected (exit 2) - continuing for aggregation phase.";
          elif [ $rc -ne 0 ]; then
            echo "::error ::Unexpected exit code $rc from detection."; exit 1
          else
            echo "::notice ::No drift detected (exit 0).";
          fi
          ls -l reports || true
      - name: Upload per-account report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: detect-report-${{ matrix.region }}-${{ strategy.job-index }}
          path: reports/

  aggregate:
    runs-on: ubuntu-latest
    needs: detect
    outputs:
      had-drift: ${{ steps.evaluate.outputs.had_drift }}
    steps:
      - name: Download all per-account artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-reports
      - name: Combine reports
        shell: bash
        run: |
          set -e
          mkdir -p combined
          if [ ! -d all-reports ]; then
            echo '::warning ::Artifact directory all-reports not found (no per-account artifacts downloaded).'
            echo '[]' > combined/all-detect.json
            echo '[]' > combined/all-summaries.json
            ls -1 combined
            exit 0
          fi
          found=$(find all-reports -type f -name 'detect-*.json' ! -name '*summary*' 2>/dev/null | wc -l | tr -d ' ')
          if [ "$found" = "0" ]; then
            echo '::warning ::No detection reports found to aggregate.'
            echo '[]' > combined/all-detect.json
          else
            jq -s '.' $(find all-reports -type f -name 'detect-*.json' ! -name '*summary*' -print) > combined/all-detect.json || echo '[]' > combined/all-detect.json
          fi
          # Summaries aggregation
          sum_found=$(find all-reports -type f -name 'detect-summary-*.json' 2>/dev/null | wc -l | tr -d ' ')
          if [ "$sum_found" = "0" ]; then
            echo '::warning ::No summary reports.'
            echo '[]' > combined/all-summaries.json
          else
            jq -s '.' $(find all-reports -type f -name 'detect-summary-*.json' -print) > combined/all-summaries.json || echo '[]' > combined/all-summaries.json
          fi
          if [ -s combined/all-summaries.json ]; then
            had_drift=$(jq '[ .[] | select(.hasDrift==true) ] | length > 0' combined/all-summaries.json)
            sev=$(jq -r '[ .[] | .severityTotals ] | reduce .[] as $o ({}; reduce ($o|to_entries[]) as $kv (. ; .[$kv.key] = (.[$kv.key]//0) + $kv.value ))' combined/all-summaries.json)
            totalObjects=$(jq '[ .[] | .objectsWithDrift ] | add // 0' combined/all-summaries.json)
            jq -n --argjson had "$had_drift" --argjson sev "$sev" --arg totalObjects "$totalObjects" '{hadDrift:$had, aggregatedSeverity:$sev, objectsWithDrift:($totalObjects|tonumber)}' > combined/aggregate-summary.json
          else
            echo '{}' > combined/aggregate-summary.json
          fi
          ls -1 combined
      - name: Upload aggregated reports
        uses: actions/upload-artifact@v4
        with:
          name: detect-reports
          path: combined/
      - name: Evaluate drift and fail if present
        id: evaluate
        shell: bash
        run: |
          set -e
          if [ ! -f combined/aggregate-summary.json ]; then echo "had_drift=false" >> $GITHUB_OUTPUT; exit 0; fi
          had=$(jq -r '.hadDrift // false' combined/aggregate-summary.json)
          echo "had_drift=$had" >> $GITHUB_OUTPUT
          fail_on='${{ inputs.fail_on_drift }}'
          min_sev='${{ inputs.fail_min_severity }}'
          if [ "$had" != "true" ]; then
            echo '::notice ::No drift detected.'
            exit 0
          fi
          # If not failing on drift, just warn
          if [ "$fail_on" != "true" ]; then
            echo '::warning ::Drift detected but fail_on_drift=false so workflow will succeed.'
            exit 0
          fi
          # Severity-based gating
          sev_json=$(jq -r '.aggregatedSeverity' combined/aggregate-summary.json)
          high=$(echo "$sev_json" | jq -r '.high // 0')
          medium=$(echo "$sev_json" | jq -r '.medium // 0')
          low=$(echo "$sev_json" | jq -r '.low // 0')
          trigger=0
          case "$min_sev" in
            high)
              [ "$high" -gt 0 ] && trigger=1 || trigger=0
              ;;
            medium)
              tot=$((high + medium))
              [ "$tot" -gt 0 ] && trigger=1 || trigger=0
              ;;
            low)
              # any drift triggers (already know had=true)
              trigger=1
              ;;
            *)
              trigger=1
              ;;
          esac
          if [ "$trigger" -eq 1 ]; then
            echo "::error ::Drift detected (severity threshold: $min_sev). High=$high Medium=$medium Low=$low"
            exit 1
          else
            echo "::warning ::Drift detected but below failure severity threshold ($min_sev). High=$high Medium=$medium Low=$low"
          fi
